import hashlib
from datetime import datetime

class Block:
    def __init__(self, data, parentNode):
        self.data = data
        self.parentNode = parentNode
        self.timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        hashMethod = hashlib.sha256()
        hashMethod.update(str(self.parentNode).encode('utf-8'))
        hashMethod.update(str(self.data).encode('utf-8'))
        hashMethod.update(str(self.timestamp).encode('utf-8'))
        self.nonce = None
        self.hash = None

class BlockChain:
    def __init__(self):
        self.blocks = []

    def addBlock(self, block):
        self.blocks.append(block)

class ProofOfWork:
    def __init__(self, block, difficulty = 5):
        self.block = block
        self.difficulty = difficulty
    
    def mine(self):
        i = 0
        prefix = '0' * self.difficulty
        while True:
            message = hashlib.sha256()
            message.update(str(self.block.parentNode).encode('utf-8'))
            message.update(str(self.block.data).encode('utf-8'))
            message.update(str(self.block.timestamp).encode('utf-8'))
            message.update(str(i).encode("utf-8"))
            digest = message.hexdigest()
            if digest.startswith(prefix):
                self.block.nonce = i
                self.block.hash = digest
                return self.block
            i += 1

blockchain = BlockChain()

genesisBlock = Block("Genesis Block", "")
proofOfWork = ProofOfWork(genesisBlock)
newblock = proofOfWork.mine()
blockchain.addBlock(newblock)

block2 = Block("Block 2", newblock.hash)
proofOfWork = ProofOfWork(block2)
newblock = proofOfWork.mine()
blockchain.addBlock(newblock)	

block3 = Block("Block 3", newblock.hash)
proofOfWork = ProofOfWork(block3)
newblock = proofOfWork.mine()
blockchain.addBlock(newblock)

print("blocks: %d\n" % len(blockchain.blocks))

for block in blockchain.blocks:
    print("parentNode: %s" % block.parentNode)
    print("data: %s" % block.data)
    print("hash: %s" % block.hash)
    print("\n") 